// Mocks generated by Mockito 5.0.3 from annotations
// in the_process/test/mocks/services/service_test_doubles.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:the_process/actions/redux_action.dart' as _i7;
import 'package:the_process/enums/auth/authorization_step.dart' as _i11;
import 'package:the_process/enums/auth/provider_name.dart' as _i10;
import 'package:the_process/enums/database/database_section.dart' as _i9;
import 'package:the_process/enums/platform/platform_enum.dart' as _i14;
import 'package:the_process/models/auth/apple_id_credential.dart' as _i4;
import 'package:the_process/models/auth/auth_user_data.dart' as _i3;
import 'package:the_process/models/auth/google_sign_in_credential.dart' as _i2;
import 'package:the_process/services/auth_service.dart' as _i5;
import 'package:the_process/services/database_service.dart' as _i8;
import 'package:the_process/services/http_service.dart' as _i12;
import 'package:the_process/services/platform_service.dart' as _i13;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeGoogleSignInCredential extends _i1.Fake
    implements _i2.GoogleSignInCredential {}

class _FakeAuthUserData extends _i1.Fake implements _i3.AuthUserData {}

class _FakeAppleIdCredential extends _i1.Fake implements _i4.AppleIdCredential {
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i5.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i7.ReduxAction> get storeStream =>
      (super.noSuchMethod(Invocation.getter(#storeStream),
              returnValue: Stream<_i7.ReduxAction>.empty())
          as _i6.Stream<_i7.ReduxAction>);
  @override
  _i6.Future<String?> getCurrentUserId() =>
      (super.noSuchMethod(Invocation.method(#getCurrentUserId, []),
          returnValue: Future.value('')) as _i6.Future<String?>);
  @override
  _i6.Future<_i2.GoogleSignInCredential?> getGoogleCredential() =>
      (super.noSuchMethod(Invocation.method(#getGoogleCredential, []),
              returnValue: Future.value(_FakeGoogleSignInCredential()))
          as _i6.Future<_i2.GoogleSignInCredential?>);
  @override
  _i6.Future<_i3.AuthUserData> signInWithGoogle(
          {_i2.GoogleSignInCredential? credential}) =>
      (super.noSuchMethod(
          Invocation.method(#signInWithGoogle, [], {#credential: credential}),
          returnValue:
              Future.value(_FakeAuthUserData())) as _i6
          .Future<_i3.AuthUserData>);
  @override
  _i6.Future<_i4.AppleIdCredential> getAppleCredential() =>
      (super.noSuchMethod(Invocation.method(#getAppleCredential, []),
              returnValue: Future.value(_FakeAppleIdCredential()))
          as _i6.Future<_i4.AppleIdCredential>);
  @override
  _i6.Future<_i3.AuthUserData> signInWithApple(
          {_i4.AppleIdCredential? credential}) =>
      (super.noSuchMethod(
          Invocation.method(#signInWithApple, [], {#credential: credential}),
          returnValue:
              Future.value(_FakeAuthUserData())) as _i6
          .Future<_i3.AuthUserData>);
  @override
  _i6.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i8.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<_i9.DatabaseSection, _i6.StreamSubscription<dynamic>> get subscriptions =>
      (super.noSuchMethod(Invocation.getter(#subscriptions), returnValue: <
              _i9.DatabaseSection, _i6.StreamSubscription<dynamic>>{})
          as Map<_i9.DatabaseSection, _i6.StreamSubscription<dynamic>>);
  @override
  set subscriptions(
          Map<_i9.DatabaseSection, _i6.StreamSubscription<dynamic>>?
              _subscriptions) =>
      super.noSuchMethod(Invocation.setter(#subscriptions, _subscriptions),
          returnValueForMissingStub: null);
  @override
  _i6.Stream<_i7.ReduxAction> get storeStream =>
      (super.noSuchMethod(Invocation.getter(#storeStream),
              returnValue: Stream<_i7.ReduxAction>.empty())
          as _i6.Stream<_i7.ReduxAction>);
  @override
  void connectProfileData({String? uid}) => super.noSuchMethod(
      Invocation.method(#connectProfileData, [], {#uid: uid}),
      returnValueForMissingStub: null);
  @override
  void disconnect(_i9.DatabaseSection? dbSection) =>
      super.noSuchMethod(Invocation.method(#disconnect, [dbSection]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> updateAuthorizationStep(
          {_i10.ProviderName? provider,
          String? uid,
          _i11.AuthorizationStep? step}) =>
      (super.noSuchMethod(
          Invocation.method(#updateAuthorizationStep, [],
              {#provider: provider, #uid: uid, #step: step}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> createSection({String? uid, String? name}) =>
      (super.noSuchMethod(
          Invocation.method(#createSection, [], {#uid: uid, #name: name}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i12.HttpService {
  MockHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> createSection({String? name}) =>
      (super.noSuchMethod(Invocation.method(#createSection, [], {#name: name}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
}

/// A class which mocks [PlatformService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformService extends _i1.Mock implements _i13.PlatformService {
  MockPlatformService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.PlatformEnum detectPlatform() =>
      (super.noSuchMethod(Invocation.method(#detectPlatform, []),
          returnValue: _i14.PlatformEnum.web) as _i14.PlatformEnum);
  @override
  _i6.Future<void> getAuthorized(
          {_i10.ProviderName? provider, String? state}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getAuthorized, [], {#provider: provider, #state: state}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> launchUrl(String? url) =>
      (super.noSuchMethod(Invocation.method(#launchUrl, [url]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
}
